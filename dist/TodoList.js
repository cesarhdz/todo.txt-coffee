// Generated by CoffeeScript 1.6.3
(function() {
  var Task, TodoList, fs, path, root,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  path = require('path');

  Task = (function() {
    function Task(task) {
      this.task = task;
    }

    Task.prototype.priority = function() {
      var _ref, _ref1;
      return (_ref = this.task.match(Task.priority_regex)) != null ? (_ref1 = _ref.toString()) != null ? _ref1.trim() : void 0 : void 0;
    };

    Task.prototype.contexts = function() {
      var c, ctx, _i, _len, _results;
      ctx = this.task.match(Task.contexts_regex);
      if (ctx) {
        _results = [];
        for (_i = 0, _len = ctx.length; _i < _len; _i++) {
          c = ctx[_i];
          _results.push(c.trim());
        }
        return _results;
      }
    };

    Task.prototype.projects = function() {
      var p, proj, _i, _len, _results;
      proj = this.task.match(Task.projects_regex);
      if (proj) {
        _results = [];
        for (_i = 0, _len = proj.length; _i < _len; _i++) {
          p = proj[_i];
          _results.push(p.trim());
        }
        return _results;
      }
    };

    Task.prototype.properties = function() {
      var key, p, props, propsList, value, _i, _len, _ref;
      propsList = {};
      props = this.task.match(Task.props_regex);
      for (_i = 0, _len = props.length; _i < _len; _i++) {
        p = props[_i];
        _ref = p.split(':'), key = _ref[0], value = _ref[1];
        propsList[key] = value;
      }
      return propsList;
    };

    Task.prototype.date = function() {
      var err;
      try {
        return this.task.match(Task.date_regex)[1];
      } catch (_error) {
        err = _error;
      }
    };

    Task.prototype.raw = function() {
      return this.task;
    };

    Task.prototype.overdue = function() {
      if (this.date === void 0) {

      } else if (this.date < new Date()) {
        return true;
      } else {
        return false;
      }
    };

    Task.prototype.text = function() {
      return this.task.replace(Task.priority_regex, "").replace(Task.contexts_regex, "").replace(Task.date_regex, "").replace(Task.projects_regex, "").replace(Task.property_regex, "");
    };

    Task.contexts_regex = /(?:\s+|^)@\w+/g;

    Task.projects_regex = /(?:\s+|^)\+\w+/g;

    Task.priority_regex = /^\([A-Za-z]\)\s+/;

    Task.date_regex = /([0-9]{4}-[0-9]{2}-[0-9]{2})/;

    Task.props_regex = /\w+:\w+/g;

    return Task;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Task = Task;

  TodoList = (function() {
    function TodoList(args) {
      var item, line, lines, _i, _j, _len, _len1;
      this.list = [];
      if (args instanceof Array) {
        this.path = null;
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          item = args[_i];
          if (item.constructor.name === 'String') {
            this.list.push(new Task(item));
          } else if (item instanceof Task) {
            this.list.push(item);
          }
        }
      } else if (args.constructor.name === 'String') {
        this.path = args;
        if (this.path.substr(-4) !== '.txt') {
          this.path = path.join(this.path, 'todo.txt');
        }
        lines = fs.readFileSync(this.path).toString().split('\n');
        for (_j = 0, _len1 = lines.length; _j < _len1; _j++) {
          line = lines[_j];
          if (line !== '') {
            this.list.push(new Task(line));
          }
        }
      }
    }

    TodoList.prototype.path = function() {
      return this.path;
    };

    TodoList.prototype.byPriority = function(priority) {
      var task, _i, _len, _ref, _results;
      _ref = this.list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        if (task.priority() === "(" + priority + ")") {
          _results.push(task);
        }
      }
      return _results;
    };

    TodoList.prototype.byContext = function(context) {
      var ctx, l, task, _i, _len, _ref;
      l = [];
      _ref = this.list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        ctx = task.contexts();
        if (ctx && __indexOf.call(ctx, context) >= 0) {
          l.push(task);
        }
      }
      return l;
    };

    TodoList.prototype.byProject = function(project) {
      var l, proj, task, _i, _len, _ref;
      l = [];
      _ref = this.list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        proj = task.projects();
        if (proj && __indexOf.call(proj, project) >= 0) {
          l.push(task);
        }
      }
      return l;
    };

    return TodoList;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.TodoList = TodoList;

}).call(this);
